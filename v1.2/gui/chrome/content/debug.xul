<?xml version="1.0"?>
<!DOCTYPE window SYSTEM "chrome://ifpms/locale/main.dtd">
<overlay
xmlns="http://www.w3.org/1999/xhtml"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"  
xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
<script type="application/x-javascript" src="debug.js"/>
<script>
<![CDATA[
debug.reDraw=function(canvas,can_attrs)//根据参数绘制波形背景
{
    var wave=canvas;
    var can_wid=canvas.width;//$("#"+canvas).width() 计算有误
    var can_hei=canvas.height;
    var ctx=wave.getContext("2d");
    var bg_left=70;//背景左边距    
    var bg_top=5;//背景上边距
    var bg_down=40;
    var bg_right=14;
    var bg_width=can_attrs.width;//背景宽度        
    var bg_height=can_attrs.height;//背景高度  
    bg_height=can_hei-bg_down-bg_top;
    bg_width=can_wid-bg_left-bg_right;
    ctx.fillStyle="white";
    ctx.clearRect(0,0,can_wid,can_hei);
    can_attrs.height=bg_height;
    can_attrs.bg_left=bg_left;
    can_attrs.bg_top=bg_top;
    can_attrs.bg_down=bg_down;
    var x_step=parseInt(bg_width/can_attrs.x_cells);//x轴 间隔
    bg_width=x_step*can_attrs.x_cells;
    can_attrs.width=bg_width;
    ctx.strokeStyle='black';
    ctx.strokeRect(bg_left,bg_top,bg_width,bg_height);// : Draws a rectangular outline
    //画背景表格
    var y_step=bg_height/can_attrs.y_cells;//y轴间隔
    var pa_x;
    var pa_y;//绘制线条的起始坐标
    var margin_y=0;//间距
    var margin_x=0;//
    var x_index=0;
    var y_index=0;
    var x_factor=can_attrs.x_fa;
    var y_factor=can_attrs.y_fa;
    var dashstep=4;//虚线线条的空白部分长度
    var dashlen=2; //  虚线线条实线长度
    ctx.beginPath();
    pa_x=bg_left;//
    for(;pa_x<=bg_width+bg_left;pa_x+=x_step)//绘制x轴线条
    {
        var dashstart=bg_top+bg_height+margin_y;
        if(x_index%4==0)
        {
           ctx.moveTo(pa_x,dashstart);
           ctx.lineTo(pa_x,bg_top);
        }
       else
	   {
             for(;dashstart>bg_top;dashstart-=dashstep) //绘制一条虚线
             {
                  ctx.moveTo(pa_x,dashstart);
                  dashstart-=dashlen;
                  ctx.lineTo(pa_x,dashstart);
             }
       }
        ctx.strokeStyle="rgba(128,128,128,0.7)";
        ctx.lineWidth=0.5;
        ctx.closePath();
        ctx.stroke();            
        ctx.beginPath();
        ctx.font="12px Arial";
        var va=parseFloat(x_index*x_factor);
        va+=can_attrs.xbase;
        va=this.modifyfloat(va);
        ctx.strokeStyle="black";
        ctx.lineWidth=1;
       //pa_x+x_step 可能丢失精度  
        pa_x=debug.modifyfloat(pa_x,100000);
        if(x_index%4==0)
        {
	 var currentTime=0;
	 if(typeof(can_attrs.plotdata0)=='undefined'){
	    return;
	 }
	 var xIndex=Math.round(can_attrs.plotdata0.length*x_index/can_attrs.x_cells)-1;
	 //jsdump(xIndex);
	 if(xIndex<0){
	    xIndex=0;
	 }
	 if(can_attrs.times[xIndex]!=0){
	    currentTime=new Date(can_attrs.times[xIndex]).format("hh:mm:ss S");
	 }else{
	    currentTime=0;
	 }
	 if(can_attrs.showHideTime==0){
	    ctx.strokeText(va,pa_x-10,bg_top+bg_height+margin_y+15);//X轴下标值
	 }else{
	    ctx.strokeText(currentTime,pa_x-20,bg_top+bg_height+margin_y+15);
	 }
        }
        ctx.closePath();
		ctx.stroke();
        x_index++;
        if(x_index==can_attrs.x_cells+1)
        {
            break;
        }
    }
    pa_y=bg_top+bg_height; //bg_top+y_step;
    pa_x=bg_left-margin_x;
	ctx.beginPath();
    for(;pa_y>=bg_top;pa_y-=y_step)//绘制y轴线条
    {
          var dashstart=pa_x;
          if(y_index%2==0&&y_index!=0)
          {
             ctx.moveTo(dashstart,pa_y);
             ctx.lineTo(dashstart+bg_width,pa_y);
          }
          else{
                for(;dashstart<pa_x+bg_width;dashstart+=dashstep) //绘制一条虚线
                {
                     ctx.moveTo(dashstart,pa_y);
                     dashstart+=dashlen;
                     ctx.lineTo(dashstart,pa_y);      
                }
          }
		  var oldsty=ctx.strokeStyle;
          ctx.strokeStyle="rgba(128,128,128,1)";
          ctx.lineWidth=0.25;
          ctx.closePath();
		  //jsdump('y index color  width '+y_index+' '+ctx.strokeStyle+' '+ctx.lineWidth);
          ctx.stroke();
		  ctx.strokeStyle=oldsty;
          var va=parseFloat(y_index*y_factor);
          va+=can_attrs.ybase;
          va=this.modifyfloat(va);
          if(y_index%2==0)
          {
            ctx.beginPath();
            var oldcolor=ctx.strokeStyle;
            ctx.strokeStyle="black";
            ctx.lineWidth=1;
            ctx.strokeText(va,pa_x-can_attrs.y_caption,pa_y+5);
            ctx.closePath();
            ctx.stroke();
            ctx.strokeStyle=oldcolor;
          }
          y_index++;
    }
     ctx.beginPath();
     ctx.strokeStyle="black";
     ctx.font="15px Times New Roman";
     if(!debug.dumpinfo)
     {
        debug.dumpinfo="";
     }
     debug.dumpinfo=''; //屏蔽测试 字符 
     var painfo=can_attrs.sid; 
	 var offleft=can_attrs.sampletype.length*30;
	 offleft=bg_left+bg_width/2-offleft-30;
     ctx.strokeText(painfo+" ",offleft,bg_top+bg_height+margin_y+35);//X轴 标题
     var oldst=ctx.strokeStyle;
	 offleft+=60;
	 var pcolors=['blue','red','green','purple'];
	 for(var i=0;i<can_attrs.sampletype.length;i++)
	 {
	     if(i<4)
	     {
	         ctx.strokeStyle=pcolors[i];
	     }
	    else{
	       ctx.strokeStyle=debug.plotcolors[can_attrs.sampletype[i]];
	     }
	     ctx.strokeText(debug.dataNames[can_attrs.sampletype[i]],offleft,bg_top+bg_height+margin_y+35);
	     offleft+=60;
	 }
	 var timeinfo=can_attrs.timeinfo;
	 var dataInfo=new Date(can_attrs.times[can_attrs.times.length-1]).format("yyyy-MM-dd");
	 ctx.strokeStyle='black';
   if(!can_attrs.sid || can_attrs.sid==null || can_attrs.sid=="null"){
    can_attrs.sid = debug.getSidFromPid(0);
   }
   var did = can_attrs.sid.substring(can_attrs.sid.indexOf("-")+1,can_attrs.sid.lastIndexOf("-"));
	 if(Ifpms.Xpcom.DCMgmt.getDC(did).product_type==0){
	    ctx.strokeText(timeinfo,offleft,bg_top+bg_height+margin_y+35);
	 }else{
	    ctx.strokeText(dataInfo,offleft,bg_top+bg_height+margin_y+35);
	 }
     ctx.strokeStyle=oldst;
     ctx.closePath();
     ctx.beginPath();
     //ctx.moveTo(bg_left-margin_x-can_attrs.y_caption-5,bg_top+bg_height/2+60);
     //ctx.lineTo(bg_left-margin_x-can_attrs.y_caption-5,bg_top+bg_height/2);
     //ctx.mozTextAlongPath(can_attrs.y_title,true);
     ctx.closePath();
     //jsdump("can_attrs.plotdata0length: "+can_attrs.plotdata0.length);
     if(can_attrs.sampletype.length>=1)
     {
        this.render_data(canvas,can_attrs,can_attrs.plotdata0,"rgba(0,0,255,0.8)",1);
     }
     if(can_attrs.sampletype.length>=2)
     {
        this.render_data(canvas,can_attrs,can_attrs.plotdata1,"red",1);
     }
     if(can_attrs.sampletype.length>=3)
     {
        this.render_data(canvas,can_attrs,can_attrs.plotdata2,"green",1);
     }
     if(can_attrs.sampletype.length>=4)
     {
        this.render_data(canvas,can_attrs,can_attrs.plotdata3,"purple",1);
     }
	 if(can_attrs.sampletype.length>=5)
	 {
	   var ran=can_attrs.sampletype.length;
	   var plt;
	   var color;
	   for(var i=4;i<ran;i++)
	   {
	     plt=eval('can_attrs.plotdata'+i);
		 color=debug.plotcolors[can_attrs.sampletype[i]];
         this.render_data(canvas,can_attrs,plt,color,1); 
       }
	 }
}

debug.render_data=function(canvas,can_attrs,data_list,color,flag)//绘制波形上的各个点
{   
    var wave=canvas;
    var can_wid=canvas.width;
    var can_hei=canvas.height;
    var ctx=wave.getContext("2d");
    var data_y;
    var data_x;
    var show_data_x_list=[];
    var show_data_y_list=[];
    for(i in data_list )
    {
      if(flag==1)
      {
       data_y=can_attrs.bg_top+can_attrs.height-(data_list[i]-can_attrs.ybase)/(can_attrs.y_cells*can_attrs.y_fa)*can_attrs.height;
       if(can_attrs.y_fa==0)
       {
        data_y=can_attrs.bg_top+can_attrs.height;
       }
      }
      else{
           data_y=can_attrs.bg_top+can_attrs.height-(data_list[i]-can_attrs.y2base)/(can_attrs.y_cells*can_attrs.y2_fa)*can_attrs.height;
          if(can_attrs.y2_fa==0)
          {
           data_y=can_attrs.bg_top+can_attrs.height;
          }
      }
      var index=parseInt(i);
      data_x=can_attrs.bg_left+index*(can_attrs.width/can_attrs.framepoints);
      show_data_x_list.push(data_x);
      show_data_y_list.push(data_y);
      //wave.addEventListener("click",function(){alert(data_y)},false);
     }
    ctx.beginPath();
    if(show_data_x_list.length>1)
    {
       for(i=1;i<show_data_x_list.length;i++)
       {
          ctx.moveTo(show_data_x_list[i-1],show_data_y_list[i-1]);
          ctx.lineTo(show_data_x_list[i],show_data_y_list[i]);
       }
    }
    else
    {
       //ctx.moveTo(show_data_x_list[0],show_data_y_list[0]);
       //ctx.lineTo(show_data_x_list[0],show_data_y_list[0]);   
    }
    ctx.lineWidth=1;
    var oldcolor=ctx.strokeStyle;
    var oldwid=ctx.lineWidth;//
    ctx.strokeStyle=color;
    ctx.lineCap="round";
    ctx.lineJoin='round';
    ctx.stroke();
    ctx.closePath();
    ctx.strokeStyle=oldcolor;
    ctx.lineWidth=oldwid;
}
debug.export_png=function(can,sid)//导出为png图片
{
    // 导出图片时 关闭绘图功能 否则导致假死
   		var ids=['wave_canvas','sec_wave','third_wave','fourth_wave'];
	        var layout=document.getElementById('layoutType').value;
		var recover=[];
		for(var i=0;i<parseInt(layout);i++)
		{
		   var foocan=document.getElementById(ids[i]);
		   if(foocan.waveobj.enableflag==true)
		   {
		         recover.push(ids[i]);
			 foocan.waveobj.enableflag=false;
		   }
		}
    var wave=can;//document.getElementById("wave_canvas");
    var dd = new Date(); 
    dd.setDate(dd.getDate());//获取
    var y = dd.getYear(); 
    var m = dd.getMonth()+1;//获取当前月份的日期 
    var d = dd.getDate();
    var h=dd.getHours();
    var mi=dd.getMinutes();
    var s=dd.getSeconds();
    y+=1900;
    var today=y+"_"+m+"_"+d+"_"+h+"_"+mi+"_"+s+"_";
    var filename=today+sid+'.png';
    var nsIFilePicker = Components.interfaces.nsIFilePicker;
    var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(nsIFilePicker);
    var strbun=document.getElementById('debugstr');
    fp.init(window, strbun.getString('choosedir'), nsIFilePicker.modeGetFolder);
    var res=fp.show();
    var filepath='chrome://ifpms/content/waves/';
    if(nsIFilePicker.returnOK==res)
    {
       filepath=GREUtils.File.append(fp.file.path,filename);
    }
    else{
        //取消导出图片  重新绘制图形
		for( i in recover )
		{
		 document.getElementById(recover[i]).waveobj.enableflag=true;
		}
        return;
    }
    saveCanvas(wave, filepath);
    var tipstr=strbun.getString('savesuccess');
    GREUtils.Dialog.alert(strbun.getString("alert"),tipstr);
    for( i in recover )
    {
	document.getElementById(recover[i]).waveobj.enableflag=true;
    }
    //导出图片完成后 重新开启绘图功能 
}
debug.downloadFile=function (url,name)
{  
   var file =Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);   
   var chromepath="chrome://ifpms/content/waves/"+name;
   var localpath=GREUtils.File.chromeToPath(chromepath);
   file.initWithPath(localpath);
    var ios = Components.classes['@mozilla.org/network/io-service;1'].getService(Components.interfaces.nsIIOService);  
    var uri = ios.newURI(url, null, null);  
    var persist=Components.classes["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"].createInstance(Components.interfaces.nsIWebBrowserPersist);  
    const nsIWBP = Components.interfaces.nsIWebBrowserPersist;  
    const flags = nsIWBP.PERSIST_FLAGS_REPLACE_EXISTING_FILES;  
    persist.persistFlags = flags | nsIWBP.PERSIST_FLAGS_FROM_CACHE;  
    persist.saveURI(uri, null, null, null, null, file);  
}
function zeroarray(ar)
{
    for(var i=0;i<ar.length;i++)
    {
        ar[i]=0;
    }
}
function saveCanvas(canvas, destFile) {
  // convert string filepath to an nsIFile
  var file = Components.classes["@mozilla.org/file/local;1"]
                       .createInstance(Components.interfaces.nsILocalFile);
  file.initWithPath(destFile);
  // create a data url from the canvas and then create URIs of the source and targets  
  var io = Components.classes["@mozilla.org/network/io-service;1"]
                     .getService(Components.interfaces.nsIIOService);
  var source = io.newURI(canvas.toDataURL("image/png", ""), "UTF8", null);
  var target = io.newFileURI(file)
  var persist = Components.classes["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
                          .createInstance(Components.interfaces.nsIWebBrowserPersist);
  persist.persistFlags = Components.interfaces.nsIWebBrowserPersist.PERSIST_FLAGS_REPLACE_EXISTING_FILES;
  persist.persistFlags |= Components.interfaces.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
  persist.saveURI(source, null, null, null, null, file);
}

function pauseCanvas(){
    pauseBackThread();
    document.getElementById("wave_canvas").trigger(0);
    document.getElementById("sec_wave").trigger(0);
    document.getElementById("third_wave").trigger(0);
    document.getElementById("fourth_wave").trigger(0);
}

function pauseBackThread()
{
  for(di=0;di<Ifpms.Xpcom.DCMgmt.dc_list.length;di++)
  {
    var tdc=Ifpms.Xpcom.DCMgmt.dc_list.queryElementAt(di,Components.interfaces.nsIPyIfpmsDC);
	   if(tdc.product_type!=0)
	   {
	     tdc.blockThread();
	   }
	
  }
}

function recoverCanvas(){

  for(di=0;di<Ifpms.Xpcom.DCMgmt.dc_list.length;di++)
  {
    var tdc=Ifpms.Xpcom.DCMgmt.dc_list.queryElementAt(di,Components.interfaces.nsIPyIfpmsDC);
	   if(tdc.product_type!=0)
	   {
	     tdc.awakeThread();
	   }
  }


    document.getElementById("wave_canvas").setWave();
    document.getElementById("sec_wave").setWave();
    document.getElementById("third_wave").setWave();
    document.getElementById("fourth_wave").setWave();
}
function shiftPauseRun()
{
var strbundle=document.getElementById('debugstr');
var pause=strbundle.getString('pause');
var continu=strbundle.getString('start');
var pa=document.getElementById('pause').getAttribute('state');
if(pa=='0')
{
 document.getElementById('pause').setAttribute('state','1');
 document.getElementById('pause').setAttribute('label',continu);
 pauseCanvas();
}
else{

 document.getElementById('pause').setAttribute('state','0');
 document.getElementById('pause').setAttribute('label',pause);
 recoverCanvas();
}



}
]]>
</script>
<xul:stringbundleset >
<xul:stringbundle id="debugstr" src="chrome://ifpms/locale/debug.properties"/>
</xul:stringbundleset>
<xul:vbox id='debug' style='background:white;'>
<xul:groupbox  flex='1'   id='wave_panel_box' pack='start' style='overflow:auto;'>
<xul:hbox >
<xul:label class='margin_label' style='color:black;' value='&debug.layout;' />
<xul:menulist id='layoutType' onselect='debug.changeLayout(this.value);'>
<xul:menupopup>
<xul:menuitem  label='1*2' value='2'/>
<xul:menuitem  label='1*3' value='3'/>
<xul:menuitem  label='1*4' value='4'/>
</xul:menupopup>
</xul:menulist>
<xul:label value='&debug.samplenumber;' class="margin_label" style="color:black;"/>
<xul:textbox id='sampleNumber' type='number' width='60' min='1' max='4097'  increment='300' value='300' onchange='debug.changeConfig();'/>
<xul:label value='&debug.sampleend;' class="margin_label" style="color:black;"/>
<xul:textbox id='sample_end' type='number' width='60'  value='1' min="1" max="4097" onchange='debug.changeConfig();'/>
<xul:button id='pause' label='&debug.wave.pause;' state='0' style='width:50px;' oncommand="shiftPauseRun();"/>
</xul:hbox>
<xul:hbox   id='wave_canvas'  class='cls_canvas' />
<xul:hbox   id='sec_wave'  class='cls_canvas'  style='border:0px gray solid'  />
<xul:hbox   id='third_wave'  class='cls_canvas' style='border:0px gray solid' />
<xul:hbox   id='fourth_wave'  class='cls_canvas' style='border:0px gray solid' />
</xul:groupbox>
</xul:vbox>
</overlay>