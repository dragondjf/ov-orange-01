#include "nsISupports.idl"
#include "nsIMutableArray.idl"

// Forwarded declaration.
interface nsIPyIfpmsEvent;
interface nsIPyIfpmsAlarmRecord;


/*
 * 防区对象
 */
[scriptable, uuid(dbe9c5ab-e5e6-4096-86a7-c3a1dc9e5567)]
interface nsIPyIfpmsPA : nsISupports {
	
  attribute unsigned long did; /* 采集器编号 */
  attribute unsigned long pid; /* 防区编号 */
  attribute wstring sid;      /* 编号 */

  attribute wstring name;
  attribute wstring desc;
  
  attribute boolean enable;
  attribute boolean audio_enable;
  
  attribute unsigned long enable_start; /* 启用起点时间,时 */
  attribute unsigned long enable_end;   /* 启用终点时间,时 */


  attribute wstring  sample_path;/*   样本路径 */
  attribute unsigned long sample_pid;/* 样本防区编号 */
  attribute unsigned long sample_startstamp;/* 样本开始 时间戳 */
  attribute unsigned long sample_endstamp;/*样本结束  时间戳 */
  attribute unsigned long sample_currentstamp;/*  当前处理 的样本 时间戳 */
  attribute float sample_import_rate;/*样本导入速率*/
  attribute unsigned long fft_begin;/*  fft 变换 窗口起点 */
  attribute unsigned long fft_end;/*  fft 变换 窗口 终点 */
  attribute unsigned long fft_noise_value;/*  fft 变换 噪声值 */
  attribute unsigned long fft_magic_value; /* fft 变换  所需参数*/
  attribute unsigned long fft_size;/* fft 变换所用样本数 */
  attribute unsigned long fft_style;/*fft变换 模式*/
  
  /* 坐标 */
  attribute unsigned long cx;
  attribute unsigned long cy;
  
  attribute unsigned long status;
  attribute unsigned long latest_change_time;

  attribute unsigned long work_mode;		/*工作模式*/
  attribute unsigned long process_mode;    /*数据处理模式*/

  /*周界报警控制 */

  attribute unsigned long alarm_sensitivity ;	/*告警灵敏度*/ 
  attribute unsigned long alarm_resp_time ;		/*告警响应时间*/ 
  attribute unsigned long alarm_resistant_factor;	/*抗扰系数*/ 
  attribute unsigned long alarm_resistant_factor_gsd;	/*地波抗扰系数*/ 

  /* 下位机控制 */
  attribute unsigned long sensitivity;	/* 灵敏度，即放大倍数 */ 

  attribute nsISupports dc; /* 指向DC */

  long pre_init(in unsigned long did, in unsigned long pid);

  long post_init(in nsISupports dc);

  /* 样本数据大小 */
  long getSamplingSize();

  /* 取采样样本 */
  /* offset 输入：采样偏移，负数表示取最近abs(offset)个样本，正数表示从上次的偏移量为offset，从上次偏移量开始取所有最新的采样数据
			输出：最新采样数据的偏移量 */
  
  /* type: min, max, freq, spread, prewarn*/
  void getSampling(in wstring type, inout long offset, out PRUint32 count, [array, size_is(count)]out PRInt32 data,[array,size_is(count)]out PRInt64 time );

 /* 获得音频文件名，输入时间戳，输出文件名 */ 
  void getWaveFile(in unsigned long timestamp, out wstring filename);
 /* 取原始数据，输入时间戳，输出采样率和数据样本*/
  void getWavData(in unsigned long timestamp, out long sample_rate, out PRUint32 count, [array, size_is(count)]out PRInt32 data);
  /* 取轮廓数据，输入时间戳 */
  void getWavProf(in unsigned long timestamp, out long sample_rate, out PRUint32 count, [array, size_is(count)]out PRInt32 max, [array, size_is(count)]out PRInt32 min);
  void getSamplingBasic(inout long offset, out PRUint32 count,
						  [array, size_is(count)]out PRInt32 min,
						  [array, size_is(count)]out PRInt32 max,
						  [array, size_is(count)]out PRInt32 freq,
						  [array, size_is(count)]out PRInt32 spread,
						  [array, size_is(count)]out PRInt32 prewarn,
						  [array, size_is(count)]out PRInt64 time
						  );

  void getSamplingAll(inout long offset, out PRUint32 count,
						  [array, size_is(count)]out PRInt32 min,
						  [array, size_is(count)]out PRInt32 max,
						  [array, size_is(count)]out PRInt32 freq,
						  [array, size_is(count)]out PRInt32 spread,
						  [array, size_is(count)]out PRInt32 prewarn,
						  [array, size_is(count)]out PRInt32 data0,
						  [array, size_is(count)]out PRInt32 data1,
						  [array, size_is(count)]out PRInt32 data2,
						  [array, size_is(count)]out PRInt32 data3,
						  [array, size_is(count)]out PRInt32 data4,
						  [array, size_is(count)]out PRInt32 data5,
						  [array, size_is(count)]out PRInt32 data6,
						  [array, size_is(count)]out PRInt32 data7,
						  [array, size_is(count)]out PRInt32 data8,
						  [array, size_is(count)]out PRInt32 data9,
						  [array, size_is(count)]out PRInt64 time
						  );
  
};

/*
 * 采集器对象
 */
[scriptable, uuid(da1b8cda-c972-47a6-bcb8-ba69fcff5b0c)]
interface nsIPyIfpmsDC : nsISupports {
  
  attribute unsigned long did; /* 采集器编号 */
  attribute wstring sid;      /* 编号 */
 
  attribute wstring ipaddr;
  attribute unsigned long product_type;
  attribute unsigned long protocol_ver; /*1,协议v1, 2, 协议v2*/
  attribute unsigned long Q_workmode; /*1-独立工作模式, 0-采集器模式*/
  attribute wstring mac;

  attribute wstring name;
  attribute wstring desc;

  attribute boolean enable;
  attribute boolean audio_enable;

  /* 坐标 */
  attribute unsigned long cx;
  attribute unsigned long cy;

  attribute unsigned long status;
  attribute unsigned long latest_change_time;

  attribute wstring product_id;
  attribute wstring hw_version;
  attribute wstring sw_version;
  attribute unsigned long machine_id;
  attribute unsigned long slot_id;
  attribute boolean sample_config_changed;

  /* 需同步的配置 */
  attribute unsigned long medium_type;
  attribute unsigned long sensitivity;	/* 灵敏度 */ 
  attribute unsigned long sensitivity2;
  attribute unsigned long env_factor;	/* 环境系数 */ 
  
  /* 防区数组 */
  attribute nsIMutableArray pa_list;
  attribute unsigned long pa_num;

  long pre_init(in unsigned long type, in wstring ipaddr, in unsigned long pa_num, in unsigned long id);
  long post_init();

  long set(in unsigned long medium_type, in unsigned long sensitivity, in unsigned long env_factor);

  /* 配置同步，cmd: 参考通信协议, channel_id: 通道号 */
  long sync(in unsigned long cmd, in unsigned long channel_id);
  /* 挂起 导入 线程 */
  boolean blockThread();
  /*唤醒  线程   */
  boolean awakeThread();
  /* 清除资源，如中止线程 */
  void clean();

  /* 根据did/pid取PA对象 */
  nsIPyIfpmsPA getPA(in unsigned long pid);

};

/*
 * 维护接口
 */
[scriptable, uuid(91a1466e-230e-4f3d-8266-3b064a12528b)]
interface nsIPyIfpmsDCMgmt : nsISupports {

  /**** 防区管理 ****/
  /* 创建 DC, 同时创建pa_num个PA */
  nsIPyIfpmsDC createDC(in unsigned long type, in wstring ipaddr, in unsigned long pa_num, in unsigned long id, out long retcode);

  /* 根据id取DC对象*/
  nsIPyIfpmsDC getDC(in unsigned long id);

  /* 删除 DC, 同时删除所有PA */
  void removeDC(in unsigned long id);

  /* 根据did/pid取PA对象 */
  nsIPyIfpmsPA getPA(in unsigned long did, in unsigned long pid);

  /* 采集器列表 */
  attribute nsIMutableArray dc_list;

  /* 防区列表 */
  attribute nsIMutableArray pa_list;


  /**** 告警管理 ****/

  /* 历史告警 */
  attribute nsIMutableArray alarm_history;
  
  /* 发生新告警 */
  void newAlarm(in unsigned long did, in unsigned long pid, in unsigned long alm_type, in boolean new_alarm, in boolean gui_notify);
  
  /* 确认告警 */
  void confirmAlarm(in unsigned long id, in wstring operator, in wstring notes); 
  

  /**** 服务管理 ****/
  /* stop the network service */
  void start(in nsIPyIfpmsEvent alarm_listener);
  /*void start(in short port);*/
  
  /* stop the network service */
  void stop();

};

/*
 * 历史告警记录
 */
[scriptable, uuid(5d3096a3-2aeb-4051-b1ac-07806be803f6)]
interface nsIPyIfpmsAlarmRecord: nsISupports {
  attribute unsigned long id;		/* 顺序增加的编号 */
  attribute unsigned long did;		/* 设备编号 */
  attribute unsigned long pid;		/* 防区编号 */
  attribute unsigned long aid;		/* 告警类型 */
  attribute unsigned long happen_time; /* 发生时间 */
  attribute wstring notes;			/* 备注 */
  attribute boolean is_confirmed;	/* 已确认 */
  attribute wstring confirm_notes;	/* 确认备注 */
  attribute unsigned long confirm_time; /* 确认时间 */
  attribute wstring confirm_operator; /* 确认操作员 */
};
